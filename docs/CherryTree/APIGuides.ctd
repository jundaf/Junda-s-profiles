<?xml version="1.0" ?><cherrytree><node name="App Components" prog_lang="custom-colors" readonly="False" tags="" unique_id="1"><rich_text></rich_text><node name="Activities" prog_lang="custom-colors" readonly="False" tags="" unique_id="4"><rich_text></rich_text><node name="Loaders" prog_lang="custom-colors" readonly="False" tags="" unique_id="5"><rich_text>Introduced in Android 3.0, loaders make it easy to asynchronously load data in an activity or fragment. Loaders have these characteristics:

    • They are available to every Activity and Fragment.
    • They provide asynchronous loading of data.
    • They monitor the source of their data and deliver new results when the content changes.
    • They automatically reconnect to the last loader's cursor when being recreated after a configuration change. Thus, they don't need to re-query their data.

</rich_text><rich_text scale="h2" underline="single">Loader API Summary</rich_text><rich_text>

</rich_text><rich_text scale="h3">LoaderManager</rich_text><rich_text>

There is only one LoaderManager per activity or fragment. But a LoaderManager can have multiple loaders.

</rich_text><rich_text scale="h3">LoaderManager.LoaderCallbacks</rich_text><rich_text>

</rich_text><rich_text scale="h3">Loader/AsyncTaskLoader

CursorLoader</rich_text><rich_text>

A subclass of AsyncTaskLoader that queries the ContentResolver and returns a Cursor. </rich_text><rich_text background="#ffffffff0000">Using this loader is the best way to asynchronously load data from a ContentProvider</rich_text><rich_text>, instead of performing a managed query through the fragment or activity's APIs.

</rich_text><rich_text scale="h2" underline="single">Using Loaders in an Application</rich_text><rich_text>

</rich_text><rich_text scale="h3">Starting a Loader</rich_text><rich_text>

You typically initialize a Loader within the activity's onCreate() method, or within the fragment's onActivityCreated() method. You do this as follows:

</rich_text><rich_text family="monospace" foreground="#7f7f7f7f7f7f">// Prepare the loader.  Either re-connect with an existing one, or start a new one.
getLoaderManager().initLoader(0, null, this);</rich_text><rich_text>

The initLoader() call ensures that a loader is initialized and active. It has two possible outcomes:

    • If the loader specified by the ID already exists, the last created loader is reused.
    • If the loader specified by the ID does not exist, initLoader() triggers the LoaderManager.LoaderCallbacks method onCreateLoader(). This is where you implement the code to instantiate and return a new loader.

</rich_text><rich_text background="#ffffffff0000">If at the point of this call the caller is in its started state, and the requested loader already exists and has generated its data, then the system calls onLoadFinished() immediately (during initLoader())</rich_text><rich_text>, so you must be prepared for this to happen. 

</rich_text><rich_text scale="h3">Restarting a Loader</rich_text><rich_text>

To discard your old data, you use restartLoader(). 

</rich_text><rich_text scale="h3">Using the LoaderManager Callbacks</rich_text><rich_text>

Loaders, in particular CursorLoader, are expected to retain their data after being stopped. This allows applications to keep their data across the activity or fragment's onStop() and onStart() methods, so that when users return to an application, they don't have to wait for the data to reload. 

</rich_text><rich_text scale="h3">onLoadFinished</rich_text><rich_text>

This method is called when a previously created loader has finished its load. </rich_text><rich_text background="#ffffffff0000">This method is guaranteed to be called prior to the release of  the last data that was supplied for this loader.</rich_text><rich_text>  At this point  you should remove all use of the old data (since it will be released  soon), but should not do your own release of the data since its loader owns it and will take care of that.

</rich_text><rich_text scale="h3">onLoaderReset</rich_text><rich_text>

This method is called when a previously created loader is being reset, thus making its data unavailable. This callback lets you find out when the data is about to be released so you can remove your reference to it. 
</rich_text></node></node><node name="Content Providers" prog_lang="custom-colors" readonly="False" tags="" unique_id="2"><rich_text></rich_text><node name="Creating a Content Provider" prog_lang="custom-colors" readonly="False" tags="" unique_id="3"><rich_text>
</rich_text><rich_text scale="h2">Before You Start Building</rich_text><rich_text>

Decide if you need a content provider. 

• You want to offer complex data or files to other applications.
• You want to allow users to copy complex data from your app into other apps.
• You want to provide custom search suggestions using the search framework.
• You don't need a provider to use an SQLite database if the use is entirely within your own application.     

Next, follow these steps to build your provider:

1. Design the raw storage for your data. A content provider offers data in two ways: File Data or Structured Data.
2. Define a concrete implementation of the </rich_text><rich_text link="webs http://developer.android.com/reference/android/content/ContentProvider.html">ContentProvider</rich_text><rich_text> class and its required methods.
3. </rich_text><rich_text background="#ffffffff0000">Define the provider's authority string, its content URIs, and column names.</rich_text><rich_text> If you want the provider's application to handle intents, also define intent actions, extras data, and flags. Also define the permissions that you will require for applications that want to access your data. You should consider </rich_text><rich_text background="#ffffffff0000">defining all of these values as constants in a separate contract class</rich_text><rich_text>; later, you can expose this class to other developers.  

</rich_text><rich_text scale="h2">Designing Data Storage</rich_text><rich_text>

• SQLite database: The </rich_text><rich_text link="webs http://developer.android.com/reference/android/database/sqlite/SQLiteOpenHelper.html">SQLiteOpenHelper</rich_text><rich_text> class helps you create databases, and the </rich_text><rich_text link="webs http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html">SQLiteDatabase</rich_text><rich_text> class is the base class for accessing databases.
• File data, If you're designing a provider that offers media-related data such as music or videos, you can have a provider that combines table data and files.    
• Network based, You can also synchronize network-based data to a local data store such as a database, and then offer the data as tables or files.

Here are some tips for designing your provider's data structure:

• Table data should always have a &quot;primary key&quot; column that the provider maintains as a unique numeric value for each row. using </rich_text><rich_text link="webs http://developer.android.com/reference/android/provider/BaseColumns.html#_ID">BaseColumns._ID</rich_text><rich_text> is the best choice, because linking the results of a provider query to a </rich_text><rich_text link="webs http://developer.android.com/reference/android/widget/ListView.html">ListView</rich_text><rich_text> requires one of the retrieved columns to have the name _ID. 
• If you want to provide bitmap images or other very large pieces of file-oriented data, store the data in a file and then provide it indirectly rather than storing it directly in a table.
• Use the Binary Large OBject (BLOB) data type to store data that varies in size or has a varying structure. For example, you can use a BLOB column to store a </rich_text><rich_text link="webs http://code.google.com/p/protobuf">protocol buffer</rich_text><rich_text> or </rich_text><rich_text link="webs http://www.json.org">JSON structure</rich_text><rich_text>.
• You can also use a BLOB to implement a schema-independent table. In this type of table, you define a primary key column, a MIME type column, and one or more generic columns as BLOB.

</rich_text><rich_text scale="h2">Designing Content URIs</rich_text><rich_text>

</rich_text><rich_text scale="h3">Content URI patterns</rich_text><rich_text>

To help you choose which action to take for an incoming content URI, the provider API includes the convenience class </rich_text><rich_text link="webs http://developer.android.com/reference/android/content/UriMatcher.html">UriMatcher</rich_text><rich_text>, which maps content URI &quot;patterns&quot; to integer values.
• *: Matches a string of any valid characters of any length.
• #: Matches a string of numeric characters of any length.

The method </rich_text><rich_text link="webs http://developer.android.com/reference/android/content/UriMatcher.html#addURI%28java.lang.String,%20java.lang.String,%20int%29">addURI()</rich_text><rich_text> maps an authority and path to an integer value. The method </rich_text><rich_text link="webs http://developer.android.com/reference/android/content/UriMatcher.html#match%28android.net.Uri%29">match()</rich_text><rich_text> returns the integer value for a URI.

</rich_text><rich_text scale="h2">Implementing the ContentProvider Class

</rich_text><rich_text>Notice that your provider is not created until a </rich_text><rich_text link="webs http://developer.android.com/reference/android/content/ContentResolver.html">ContentResolver</rich_text><rich_text> object tries to access it. 

Your implementation of these methods should account for the following:
• All of these methods except </rich_text><rich_text link="webs http://developer.android.com/reference/android/content/ContentProvider.html#onCreate%28%29">onCreate()</rich_text><rich_text> can be called by multiple threads at once, so they must be thread-safe.
• Avoid doing lengthy operations in </rich_text><rich_text link="webs http://developer.android.com/reference/android/content/ContentProvider.html#onCreate%28%29">onCreate()</rich_text><rich_text>. Defer initialization tasks until they are actually needed.

</rich_text><rich_text scale="h3">Implementing the query() method</rich_text><rich_text>

If the query does not match any rows, you should return a </rich_text><rich_text link="webs http://developer.android.com/reference/android/database/Cursor.html">Cursor</rich_text><rich_text> instance whose </rich_text><rich_text link="webs http://developer.android.com/reference/android/database/Cursor.html#getCount%28%29">getCount()</rich_text><rich_text> method returns 0. You should return null only if an internal error occurred during the query process.

If you aren't using an SQLite database as your data storage, use one of the concrete subclasses of </rich_text><rich_text link="webs http://developer.android.com/reference/android/database/Cursor.html">Cursor</rich_text><rich_text>. For example, the </rich_text><rich_text link="webs http://developer.android.com/reference/android/database/MatrixCursor.html">MatrixCursor</rich_text><rich_text> class implements a cursor in which each row is an array of </rich_text><rich_text link="webs http://developer.android.com/reference/java/lang/Object.html">Object</rich_text><rich_text>. 

Remember that the Android system must be able to communicate the </rich_text><rich_text link="webs http://developer.android.com/reference/java/lang/Exception.html">Exception</rich_text><rich_text> across process boundaries. 

</rich_text><rich_text scale="h3">Implementing the insert() method</rich_text><rich_text>

This method should return the content URI for the new row. To construct this, append the new row's _ID (or other primary key) value to the table's content URI, using </rich_text><rich_text link="webs http://developer.android.com/reference/android/content/ContentUris.html#withAppendedId%28android.net.Uri,%20long%29">withAppendedId()</rich_text><rich_text>.

</rich_text><rich_text scale="h3">Implementing the onCreate() method</rich_text><rich_text>

The Android system calls </rich_text><rich_text link="webs http://developer.android.com/reference/android/content/ContentProvider.html#onCreate%28%29">onCreate()</rich_text><rich_text> when it starts up the provider. </rich_text><rich_text background="#ffffffff0000">You should perform only fast-running initialization tasks in this method, and defer database creation and data loading until the provider actually receives a request for the data.</rich_text><rich_text> If you do lengthy tasks in </rich_text><rich_text link="webs http://developer.android.com/reference/android/content/ContentProvider.html#onCreate%28%29">onCreate()</rich_text><rich_text>, you will slow down your provider's startup. In turn, this will slow down the response from the provider to other    applications.

</rich_text><rich_text scale="h2">Implementing ContentProvider MIME Types</rich_text><rich_text>

</rich_text><rich_text scale="h3">MIME types for tables</rich_text><rich_text>

For content URIs that point to a row or rows of table data, </rich_text><rich_text link="webs http://developer.android.com/reference/android/content/ContentProvider.html#getType%28android.net.Uri%29">getType()</rich_text><rich_text> should return a MIME type in Android's vendor-specific MIME format: 
    • Type part: vnd    
    • Subtype part:
            • If the URI pattern is for a single row: android.cursor.item/            
            • If the URI pattern is for more than one row: android.cursor.dir/            
    • Provider-specific part: vnd.&lt;name&gt;.&lt;type&gt;

A good choice for &lt;name&gt; is your company's name or some part of your application's Android package name. A good choice for the &lt;type&gt; is a string that identifies the table associated with the URI.         

For example, if a provider's authority is com.example.app.provider, and it exposes a table named table1, the MIME type for multiple rows in table1 is: 

    </rich_text><rich_text family="monospace">vnd.android.cursor.dir/vnd.com.example.provider.table1
</rich_text><rich_text>
For a single row of table1, the MIME type is: 

    </rich_text><rich_text family="monospace">vnd.android.cursor.item/vnd.com.example.provider.table1
</rich_text><rich_text>
</rich_text><rich_text scale="h2">Implementing Content Provider Permissions</rich_text><rich_text>

All applications can read from or write to your provider, even if the underlying data is private, because by default your provider does not have permissions set. To change this, set permissions for your provider in your manifest file, using attributes or child elements of the </rich_text><rich_text link="webs http://developer.android.com/guide/topics/manifest/provider-element.html">    &lt;provider&gt;</rich_text><rich_text> element.</rich_text><rich_text background="#ffffffff0000"> You can set permissions that apply to the entire provider, or to certain tables, or even to certain records, </rich_text><rich_text>or all three.
</rich_text></node></node></node><node name="User Interface" prog_lang="custom-colors" readonly="False" tags="" unique_id="6"><rich_text></rich_text><node name="Menus" prog_lang="custom-colors" readonly="False" tags="" unique_id="8"><rich_text link="webs http://developer.android.com/guide/topics/ui/menus.html#context-menu">http://developer.android.com/guide/topics/ui/menus.html</rich_text><rich_text>
</rich_text><node name="Contextual Menus" prog_lang="custom-colors" readonly="False" tags="" unique_id="7"><rich_text link="webs http://developer.android.com/design/patterns/selection.html" scale="h2">Selection Patterns</rich_text><rich_text>

</rich_text><rich_text background="#ffffffff0000">The long press gesture is now used to select data, combining contextual actions and selection management functions for selected data into a new element called the contextual action bar (CAB).</rich_text><rich_text>

</rich_text><rich_text scale="h3">Checklist</rich_text><rich_text>

• Whenever your app supports the selection of multiple data items, make use of the contextual action bar (CAB).
• Reserve the long press gesture for selection exclusively. Don't use it to display traditional contextual menus.
• If you don't support multi-selection within a list, long press should do nothing.
• Plan the actions you want to display inside of a CAB in the same way you would plan the actions inside your app's action bar.


</rich_text><rich_text scale="h2" underline="single">Creating a floating context menu</rich_text><rich_text>

1. Register the View (mostly ListView or GridView) with registerForContextMenu()
2. Implement the onCreateContextMenu() in the Activity or Fragment
3. Implement the onContextMenuSelected()

</rich_text><rich_text background="#ffffffff0000">When the registered view receives a long-click event, the system calls your onCreateContextMenu() method. This is where you define the menu items, usually by inflating a menu resource. </rich_text><rich_text>

</rich_text><rich_text scale="h2">Using the contextual action mode</rich_text><rich_text>

For views that provide contextual actions, you should usually invoke the contextual action mode upon one of two events (or both):

• The user performs a long-click on the view.
• The user selects a checkbox or similar UI component within the view.

</rich_text><rich_text scale="h3">Enabling the contextual action mode for individual views</rich_text><rich_text>

1. Implement the ActionMode.Callback interface. In its callback methods, you can specify the actions for the contextual action bar
2. Call startActionMode() when you want to show the bar (such as when the user long-clicks the view).

</rich_text><rich_text scale="h3">Enabling batch contextual actions in a ListView or GridView</rich_text><rich_text>

• Implement the AbsListView.MultiChoiceModeListener interface
• Call setChoiceMode() with the CHOICE_MODE_MULTIPLE_MODAL argument.

</rich_text><rich_text family="monospace" foreground="#7f7f7f7f7f7f">ListView listView = getListView();
listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE_MODAL);
listView.setMultiChoiceModeListener(new MultiChoiceModeListener() {...}
</rich_text><rich_text>
</rich_text><rich_text scale="h3">Code Example</rich_text><rich_text>

</rich_text><rich_text link="webs http://www.vogella.com/tutorials/AndroidListView/article.html#listview_actionbar">10. Contextual action mode for ListViews</rich_text><rich_text>
</rich_text></node><node name="Popup Menu" prog_lang="custom-colors" readonly="False" tags="" unique_id="9"><rich_text>A PopupMenu is a modal menu anchored to a View. It appears below the anchor view if there is room, or above the view otherwise. It's useful for:

• Providing an overflow-style menu for actions that relate to specific content (such as Gmail's email headers, shown in figure 4). </rich_text><rich_text background="#ffffffff0000">Note: This is not the same as a context menu, which is generally for actions that affect selected content.</rich_text><rich_text> 
• Providing a second part of a command sentence (such as a button marked &quot;Add&quot; that produces a popup menu with different &quot;Add&quot; options).
• Providing a drop-down similar to Spinner that does not retain a persistent selection.
</rich_text></node></node></node></cherrytree>